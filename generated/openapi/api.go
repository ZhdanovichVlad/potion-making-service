// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAPI potion-making-services
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"net/http"
)



// IngredientAPIRouter defines the required methods for binding the api requests to a responses for the IngredientAPI
// The IngredientAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IngredientAPIServicer to perform the required actions, then write the service results to the http response.
type IngredientAPIRouter interface { 
	GetAllIngredients(http.ResponseWriter, *http.Request)
}
// RecipeAPIRouter defines the required methods for binding the api requests to a responses for the RecipeAPI
// The RecipeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RecipeAPIServicer to perform the required actions, then write the service results to the http response.
type RecipeAPIRouter interface { 
	GetAllRecipes(http.ResponseWriter, *http.Request)
}


// IngredientAPIServicer defines the api actions for the IngredientAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IngredientAPIServicer interface { 
	GetAllIngredients(context.Context) (ImplResponse, error)
}


// RecipeAPIServicer defines the api actions for the RecipeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RecipeAPIServicer interface { 
	GetAllRecipes(context.Context) (ImplResponse, error)
}
