// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * OpenAPI potion-making-services
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"
)

// IngredientAPIController binds http requests to an api service and writes the service results to the http response
type IngredientAPIController struct {
	service IngredientAPIServicer
	errorHandler ErrorHandler
}

// IngredientAPIOption for how the controller is set up.
type IngredientAPIOption func(*IngredientAPIController)

// WithIngredientAPIErrorHandler inject ErrorHandler into controller
func WithIngredientAPIErrorHandler(h ErrorHandler) IngredientAPIOption {
	return func(c *IngredientAPIController) {
		c.errorHandler = h
	}
}

// NewIngredientAPIController creates a default api controller
func NewIngredientAPIController(s IngredientAPIServicer, opts ...IngredientAPIOption) *IngredientAPIController {
	controller := &IngredientAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IngredientAPIController
func (c *IngredientAPIController) Routes() Routes {
	return Routes{
		"GetAllIngredients": Route{
			strings.ToUpper("Get"),
			"/ingredients",
			c.GetAllIngredients,
		},
	}
}

// GetAllIngredients - returns an array of ingredients
func (c *IngredientAPIController) GetAllIngredients(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllIngredients(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
